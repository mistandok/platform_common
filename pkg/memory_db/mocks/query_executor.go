// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// QueryExecutor is an autogenerated mock type for the QueryExecutor type
type QueryExecutor struct {
	mock.Mock
}

type QueryExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryExecutor) EXPECT() *QueryExecutor_Expecter {
	return &QueryExecutor_Expecter{mock: &_m.Mock}
}

// DoContext provides a mock function with given fields: ctx, commandName, args
func (_m *QueryExecutor) DoContext(ctx context.Context, commandName string, args ...interface{}) (interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, commandName)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DoContext")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (interface{}, error)); ok {
		return rf(ctx, commandName, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) interface{}); ok {
		r0 = rf(ctx, commandName, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, commandName, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryExecutor_DoContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoContext'
type QueryExecutor_DoContext_Call struct {
	*mock.Call
}

// DoContext is a helper method to define mock.On call
//   - ctx context.Context
//   - commandName string
//   - args ...interface{}
func (_e *QueryExecutor_Expecter) DoContext(ctx interface{}, commandName interface{}, args ...interface{}) *QueryExecutor_DoContext_Call {
	return &QueryExecutor_DoContext_Call{Call: _e.mock.On("DoContext",
		append([]interface{}{ctx, commandName}, args...)...)}
}

func (_c *QueryExecutor_DoContext_Call) Run(run func(ctx context.Context, commandName string, args ...interface{})) *QueryExecutor_DoContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *QueryExecutor_DoContext_Call) Return(reply interface{}, err error) *QueryExecutor_DoContext_Call {
	_c.Call.Return(reply, err)
	return _c
}

func (_c *QueryExecutor_DoContext_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (interface{}, error)) *QueryExecutor_DoContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueryExecutor creates a new instance of QueryExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryExecutor {
	mock := &QueryExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
