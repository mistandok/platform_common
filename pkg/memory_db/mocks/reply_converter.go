// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ReplyConverter is an autogenerated mock type for the ReplyConverter type
type ReplyConverter struct {
	mock.Mock
}

type ReplyConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *ReplyConverter) EXPECT() *ReplyConverter_Expecter {
	return &ReplyConverter_Expecter{mock: &_m.Mock}
}

// String provides a mock function with given fields: reply, err
func (_m *ReplyConverter) String(reply interface{}, err error) (string, error) {
	ret := _m.Called(reply, err)

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, error) (string, error)); ok {
		return rf(reply, err)
	}
	if rf, ok := ret.Get(0).(func(interface{}, error) string); ok {
		r0 = rf(reply, err)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(interface{}, error) error); ok {
		r1 = rf(reply, err)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplyConverter_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type ReplyConverter_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
//   - reply interface{}
//   - err error
func (_e *ReplyConverter_Expecter) String(reply interface{}, err interface{}) *ReplyConverter_String_Call {
	return &ReplyConverter_String_Call{Call: _e.mock.On("String", reply, err)}
}

func (_c *ReplyConverter_String_Call) Run(run func(reply interface{}, err error)) *ReplyConverter_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(error))
	})
	return _c
}

func (_c *ReplyConverter_String_Call) Return(_a0 string, _a1 error) *ReplyConverter_String_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplyConverter_String_Call) RunAndReturn(run func(interface{}, error) (string, error)) *ReplyConverter_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewReplyConverter creates a new instance of ReplyConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReplyConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReplyConverter {
	mock := &ReplyConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
