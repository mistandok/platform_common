// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/mistandok/platform_common/pkg/db"
	mock "github.com/stretchr/testify/mock"

	pgconn "github.com/jackc/pgx/v5/pgconn"

	pgx "github.com/jackc/pgx/v5"
)

// SQLExecutor is an autogenerated mock type for the SQLExecutor type
type SQLExecutor struct {
	mock.Mock
}

type SQLExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *SQLExecutor) EXPECT() *SQLExecutor_Expecter {
	return &SQLExecutor_Expecter{mock: &_m.Mock}
}

// CopyFromContext provides a mock function with given fields: ctx, tableName, columnNames, rowSrc
func (_m *SQLExecutor) CopyFromContext(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error) {
	ret := _m.Called(ctx, tableName, columnNames, rowSrc)

	if len(ret) == 0 {
		panic("no return value specified for CopyFromContext")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) (int64, error)); ok {
		return rf(ctx, tableName, columnNames, rowSrc)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) int64); ok {
		r0 = rf(ctx, tableName, columnNames, rowSrc)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) error); ok {
		r1 = rf(ctx, tableName, columnNames, rowSrc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SQLExecutor_CopyFromContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyFromContext'
type SQLExecutor_CopyFromContext_Call struct {
	*mock.Call
}

// CopyFromContext is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName pgx.Identifier
//   - columnNames []string
//   - rowSrc pgx.CopyFromSource
func (_e *SQLExecutor_Expecter) CopyFromContext(ctx interface{}, tableName interface{}, columnNames interface{}, rowSrc interface{}) *SQLExecutor_CopyFromContext_Call {
	return &SQLExecutor_CopyFromContext_Call{Call: _e.mock.On("CopyFromContext", ctx, tableName, columnNames, rowSrc)}
}

func (_c *SQLExecutor_CopyFromContext_Call) Run(run func(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource)) *SQLExecutor_CopyFromContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Identifier), args[2].([]string), args[3].(pgx.CopyFromSource))
	})
	return _c
}

func (_c *SQLExecutor_CopyFromContext_Call) Return(_a0 int64, _a1 error) *SQLExecutor_CopyFromContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SQLExecutor_CopyFromContext_Call) RunAndReturn(run func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) (int64, error)) *SQLExecutor_CopyFromContext_Call {
	_c.Call.Return(run)
	return _c
}

// ExecContext provides a mock function with given fields: ctx, q, args
func (_m *SQLExecutor) ExecContext(ctx context.Context, q db.Query, args ...interface{}) (pgconn.CommandTag, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, q)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecContext")
	}

	var r0 pgconn.CommandTag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Query, ...interface{}) (pgconn.CommandTag, error)); ok {
		return rf(ctx, q, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.Query, ...interface{}) pgconn.CommandTag); ok {
		r0 = rf(ctx, q, args...)
	} else {
		r0 = ret.Get(0).(pgconn.CommandTag)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.Query, ...interface{}) error); ok {
		r1 = rf(ctx, q, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SQLExecutor_ExecContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecContext'
type SQLExecutor_ExecContext_Call struct {
	*mock.Call
}

// ExecContext is a helper method to define mock.On call
//   - ctx context.Context
//   - q db.Query
//   - args ...interface{}
func (_e *SQLExecutor_Expecter) ExecContext(ctx interface{}, q interface{}, args ...interface{}) *SQLExecutor_ExecContext_Call {
	return &SQLExecutor_ExecContext_Call{Call: _e.mock.On("ExecContext",
		append([]interface{}{ctx, q}, args...)...)}
}

func (_c *SQLExecutor_ExecContext_Call) Run(run func(ctx context.Context, q db.Query, args ...interface{})) *SQLExecutor_ExecContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(db.Query), variadicArgs...)
	})
	return _c
}

func (_c *SQLExecutor_ExecContext_Call) Return(_a0 pgconn.CommandTag, _a1 error) *SQLExecutor_ExecContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SQLExecutor_ExecContext_Call) RunAndReturn(run func(context.Context, db.Query, ...interface{}) (pgconn.CommandTag, error)) *SQLExecutor_ExecContext_Call {
	_c.Call.Return(run)
	return _c
}

// QueryContext provides a mock function with given fields: ctx, q, args
func (_m *SQLExecutor) QueryContext(ctx context.Context, q db.Query, args ...interface{}) (pgx.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, q)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryContext")
	}

	var r0 pgx.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Query, ...interface{}) (pgx.Rows, error)); ok {
		return rf(ctx, q, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.Query, ...interface{}) pgx.Rows); ok {
		r0 = rf(ctx, q, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.Query, ...interface{}) error); ok {
		r1 = rf(ctx, q, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SQLExecutor_QueryContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryContext'
type SQLExecutor_QueryContext_Call struct {
	*mock.Call
}

// QueryContext is a helper method to define mock.On call
//   - ctx context.Context
//   - q db.Query
//   - args ...interface{}
func (_e *SQLExecutor_Expecter) QueryContext(ctx interface{}, q interface{}, args ...interface{}) *SQLExecutor_QueryContext_Call {
	return &SQLExecutor_QueryContext_Call{Call: _e.mock.On("QueryContext",
		append([]interface{}{ctx, q}, args...)...)}
}

func (_c *SQLExecutor_QueryContext_Call) Run(run func(ctx context.Context, q db.Query, args ...interface{})) *SQLExecutor_QueryContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(db.Query), variadicArgs...)
	})
	return _c
}

func (_c *SQLExecutor_QueryContext_Call) Return(_a0 pgx.Rows, _a1 error) *SQLExecutor_QueryContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SQLExecutor_QueryContext_Call) RunAndReturn(run func(context.Context, db.Query, ...interface{}) (pgx.Rows, error)) *SQLExecutor_QueryContext_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRowContext provides a mock function with given fields: ctx, q, args
func (_m *SQLExecutor) QueryRowContext(ctx context.Context, q db.Query, args ...interface{}) pgx.Row {
	var _ca []interface{}
	_ca = append(_ca, ctx, q)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRowContext")
	}

	var r0 pgx.Row
	if rf, ok := ret.Get(0).(func(context.Context, db.Query, ...interface{}) pgx.Row); ok {
		r0 = rf(ctx, q, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Row)
		}
	}

	return r0
}

// SQLExecutor_QueryRowContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRowContext'
type SQLExecutor_QueryRowContext_Call struct {
	*mock.Call
}

// QueryRowContext is a helper method to define mock.On call
//   - ctx context.Context
//   - q db.Query
//   - args ...interface{}
func (_e *SQLExecutor_Expecter) QueryRowContext(ctx interface{}, q interface{}, args ...interface{}) *SQLExecutor_QueryRowContext_Call {
	return &SQLExecutor_QueryRowContext_Call{Call: _e.mock.On("QueryRowContext",
		append([]interface{}{ctx, q}, args...)...)}
}

func (_c *SQLExecutor_QueryRowContext_Call) Run(run func(ctx context.Context, q db.Query, args ...interface{})) *SQLExecutor_QueryRowContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(db.Query), variadicArgs...)
	})
	return _c
}

func (_c *SQLExecutor_QueryRowContext_Call) Return(_a0 pgx.Row) *SQLExecutor_QueryRowContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SQLExecutor_QueryRowContext_Call) RunAndReturn(run func(context.Context, db.Query, ...interface{}) pgx.Row) *SQLExecutor_QueryRowContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewSQLExecutor creates a new instance of SQLExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSQLExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *SQLExecutor {
	mock := &SQLExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
